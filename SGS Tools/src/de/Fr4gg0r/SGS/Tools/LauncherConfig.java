package de.Fr4gg0r.SGS.Tools;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.HashMap;
import java.util.List;

import android.app.ActivityManager;
import android.os.Bundle;
import android.preference.CheckBoxPreference;
import android.preference.EditTextPreference;
import android.preference.PreferenceActivity;
import android.preference.PreferenceCategory;
import android.preference.PreferenceScreen;
import android.util.Log;
import android.view.View;
import android.widget.Button;

public class LauncherConfig extends PreferenceActivity{
	
	private static final HashMap<String, Boolean> booleanValues = new HashMap<String, Boolean>(5);
	private static final HashMap<String, String> stringValues = new HashMap<String, String>(5);
	private static final String configFilePath = "/sdcard/LauncherConfig.config";
	public void onCreate(Bundle b){
		super.onCreate(b);
		setContentView(R.layout.launcherconfig);
		Button bb = (Button) findViewById(R.id.launcherconfig_b1);
		bb.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				new Thread(){
					public void run(){
						try{
							final StringBuilder sb = new StringBuilder();
							sb.append("#Generated by SGS Tools").append('\n');
							sb.append("###### Fr4gg0r Mod #######").append('\n');
							CheckBoxPreference check = (CheckBoxPreference) findPreference("useMainMenuConcentrationEffect");
							sb.append("useMainMenuConcentrationEffect=").append(check.isChecked()).append('\n');
							check = (CheckBoxPreference) findPreference("use16BitWindow");
							sb.append("use16BitWindow=").append(check.isChecked()).append('\n');
							check = (CheckBoxPreference) findPreference("dropToUninstall");
							sb.append("dropToUninstall=").append(check.isChecked()).append('\n');
							EditTextPreference edit = (EditTextPreference) findPreference("menuColumnCount");
							String count = edit.getEditText().getText().toString();
							if(count.length() < 1)count = "4";
							Log.d("edit", edit.toString());
							sb.append("menuColumnCount=").append(count).append('\n');
							check = (CheckBoxPreference) findPreference("useLargeDrawablesOnly");
							sb.append("useLargeDrawablesOnly=").append(check.isChecked()).append('\n');
							/*check = (CheckBoxPreference) findPreference("applyIconHoverFilter");
							sb.append("applyIconHoverFilter=").append(check.isChecked()).append('\n');
							check = (CheckBoxPreference) findPreference("opaqueWindow");
							sb.append("opaqueWindow=").append(check.isChecked()).append('\n');
							EditTextPreference edit = (EditTextPreference) findPreference("workspaceCellsX");							
							sb.append("workspaceCellsX=").append(edit.getText().toString()).append('\n');
							edit = (EditTextPreference) findPreference("workspaceCellsY");
							sb.append("workspaceCellsY=").append(edit.getText().toString()).append('\n');
							edit = (EditTextPreference) findPreference("itemNumOfPage");
							sb.append("itemNumOfPage=").append(edit.getText().toString()).append('\n');
							edit = (EditTextPreference) findPreference("number_cells_x");
							sb.append("number_cells_x=").append(edit.getText().toString()).append('\n');
							edit = (EditTextPreference) findPreference("number_cells_y");
							sb.append("number_cells_y=").append(edit.getText().toString()).append('\n');*/
							save(sb.toString());
							killLauncher();
							finish();
						}
						catch(Exception e){
							Log.d("exception", e.toString());
						}
					}
				}.start();
			}
		});
		readValues();		
		initPrefs();
	}
	private void initPrefs(){
		PreferenceScreen root = getPreferenceManager().createPreferenceScreen(this);
        PreferenceCategory settings = new PreferenceCategory(this);
        settings.setTitle("settings");
        root.addPreference(settings);
        
        CheckBoxPreference check = new CheckBoxPreference(this);
        check.setKey("useMainMenuConcentrationEffect");
        check.setTitle("MainMenuConcentrationEffect");
        check.setSummaryOn("enabled");
        check.setSummaryOff("disabled");
        check.setPersistent(false);
        check.setDefaultValue(getBooleanValue("useMainMenuConcentrationEffect", true));
        settings.addPreference(check);
        
        check = new CheckBoxPreference(this);
        check.setKey("use16BitWindow");
        check.setTitle("use16BitWindow");
        check.setSummaryOn("enabled");
        check.setSummaryOff("disabled");
        check.setPersistent(false);
        check.setDefaultValue(getBooleanValue("use16BitWindow", true));
        settings.addPreference(check);
        
        check = new CheckBoxPreference(this);
        check.setKey("dropToUninstall");
        check.setTitle("drop Items to uninstall them");
        check.setSummaryOn("enabled");
        check.setSummaryOff("disabled");
        check.setPersistent(false);
        check.setDefaultValue(getBooleanValue("dropToUninstall", true));
        settings.addPreference(check);
        
        check = new CheckBoxPreference(this);
        check.setKey("useLargeDrawablesOnly");
        check.setTitle("use large indicator icons");
        check.setSummaryOn("big icons");
        check.setSummaryOff("small icons");
        check.setPersistent(false);
        check.setDefaultValue(getBooleanValue("useLargeDrawablesOnly", false));
        settings.addPreference(check);
        
        EditTextPreference edit = new EditTextPreference(this);
        edit.setKey("menuColumnCount");
        edit.setTitle("menuColumnCount");
        edit.setPersistent(false);
        edit.setDefaultValue(getStringValue("menuColumnCount", "4"));
        edit.setSummary(getStringValue("menuColumnCount", "4"));
        settings.addPreference(edit);
        
        setPreferenceScreen(root);
        
		/*check = (CheckBoxPreference) findPreference("useLargeDrawablesOnly");
		check.setEnabled(getBooleanValue("useLargeDrawablesOnly", true));
		check = (CheckBoxPreference) findPreference("applyIconHoverFilter");
		check.setEnabled(getBooleanValue("applyIconHoverFilter", true));
		check = (CheckBoxPreference) findPreference("opaqueWindow");
		check.setEnabled(getBooleanValue("opaqueWindow", true));
		EditTextPreference edit = (EditTextPreference) findPreference("workspaceCellsX");
		edit.setSummary(getStringValue("workspaceCellsX", "4"));
		edit = (EditTextPreference) findPreference("workspaceCellsY");
		edit.setSummary(getStringValue("workspaceCellsY", "4"));
		edit = (EditTextPreference) findPreference("itemNumOfPage");
		edit.setSummary(getStringValue("itemNumOfPage", "16"));
		edit = (EditTextPreference) findPreference("number_cells_x");
		edit.setSummary(getStringValue("number_cells_x", "16"));
		edit = (EditTextPreference) findPreference("number_cells_y");
		edit.setSummary(getStringValue("number_cells_y", "16"));*/
	}
	private void killLauncher(){
		ActivityManager am = (ActivityManager) LauncherConfig.this.getSystemService(ACTIVITY_SERVICE);
		List<ActivityManager.RunningAppProcessInfo> ps = am.getRunningAppProcesses();
		for(ActivityManager.RunningAppProcessInfo proc : ps){
			if(proc.processName.equals("com.sec.android.app.twlauncher")){
				try {
					final Process p = Runtime.getRuntime().exec("su");
					final DataOutputStream out = new DataOutputStream(p.getOutputStream());
					out.writeBytes("kill "+proc.pid+"\n");
					out.flush();
					out.close();
					finish();
					return;
				} catch (Exception e) {
				}
			}
		}
	}
	private void save(String text){
		try{
			final BufferedWriter writer = new BufferedWriter(new FileWriter(configFilePath));
			writer.write(text);
			writer.flush();
			writer.close();
		}
		catch(Exception e){ }
	}
	private void readValues(){
		try {
			final BufferedReader reader = new BufferedReader(new FileReader("/sdcard/LauncherConfig.config"));
			String line;
			String value;
			while((line = reader.readLine()) != null){
				if(line.charAt(0) == '#')continue;
				int pos = line.indexOf('=');
				value = line.substring(pos+1, line.length());
				if(value.charAt(0) == 't' || value.charAt(0) == 'f'){
					booleanValues.put(line.substring(0, pos), Boolean.valueOf(value));
				}
				else {
					stringValues.put(line.substring(0, pos), value);
				}
			}
		} catch (Exception e) {		}
	}
    private static final boolean getBooleanValue(String name, boolean defValue){
    	Boolean result = booleanValues.get(name);
    	if(result != null)return result;
    	return defValue;
    }
    private static final String getStringValue(String name, String defValue){
    	String result = stringValues.get(name);
    	if(result != null)return result;
    	return defValue;
    }
}
